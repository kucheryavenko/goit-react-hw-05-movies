{"version":3,"file":"static/js/278.61ae6105.chunk.js","mappings":"2OAMMA,EAAkB,IAAIC,EAAAA,EAoD5B,UAlDe,WAAO,IAAD,EACnB,GAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BL,EAAAA,EAAAA,UAAS,QAArC,eAAOM,EAAP,KAAeC,EAAf,KACMC,EAAK,UAAGJ,EAAaK,IAAI,gBAApB,QAAgC,IAE3CC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,yFAChBH,EADgB,iEAKnBD,EAAU,WALS,SAOIT,EAAgBc,iBAAiBJ,GAPrC,mBASC,KAFZK,EAPW,EAOXA,MAECC,OATU,wBAUjBC,EAAAA,GAAAA,MAAY,kDACZR,EAAU,YAXO,2BAenBL,EAAgBW,EAAKG,SACrBT,EAAU,YAhBS,kDAkBnBU,QAAQC,IAAR,MACAX,EAAU,YAnBS,0DAAH,qDAuBpBI,GACD,GAAE,CAACH,IAOJ,GAAqB,OAAjBP,EAGJ,OACE,6BACE,SAAC,KAAD,CAAWkB,SAVU,SAAAC,GACvBf,EAAgC,KAAhBe,EAAqB,CAAEZ,MAAOY,GAAgB,CAAC,GAC/DlB,EAAgB,GACjB,IAQID,IAAiB,KAAM,SAAC,KAAD,CAAYoB,OAAQpB,IAChC,YAAXK,IAAwB,SAAC,KAAD,MAG9B,C,iICvDDgB,EAAAA,EAAAA,SAAAA,QAAyB,gCAAzB,0EAEavB,EAAb,wFACa,qCADb,gDAEgB,UAFhB,gDAGiB,OAHjB,qFAKE,oGACyBuB,EAAAA,EAAAA,IAAA,2BACTC,KADS,0BACWA,KADX,OAErB,CACEC,OAAQ,CACNC,SAAQ,OAACF,KAAF,SALf,cACQG,EADR,yBAUSA,GAVT,gDALF,uHAkBE,WAAuBN,GAAvB,8EACEG,KAAKf,MAAQY,EADf,SAEyBE,EAAAA,EAAAA,IAAA,eAA0B,CAC/CE,OAAQ,CACNC,SAAQ,OAACF,KAAF,MACPf,MAAOe,KAAKf,SALlB,cAEQkB,EAFR,yBASSA,GATT,gDAlBF,sHA8BE,WAAqBC,GAArB,gFACQC,EAAKC,OAAOF,GADpB,SAEyBL,EAAAA,EAAAA,IAAA,gBAAmBM,GAAM,CAC9CJ,OAAQ,CACNC,SAAQ,OAACF,KAAF,SAJb,cAEQG,EAFR,yBAQSA,GART,gDA9BF,iHAyCE,WAAgBI,GAAhB,uFACyBR,EAAAA,EAAAA,IAAA,gBAAmBQ,EAAnB,YAAiC,CACtDN,OAAQ,CACNC,SAAQ,OAACF,KAAF,SAHb,cACQG,EADR,yBAOSA,GAPT,gDAzCF,oHAmDE,WAAmBI,GAAnB,uFACyBR,EAAAA,EAAAA,IAAA,gBAAmBQ,EAAnB,YAAiC,CACtDN,OAAQ,CACNC,SAAQ,OAACF,KAAF,SAHb,cACQG,EADR,yBAOSA,GAPT,gDAnDF,6D","sources":["pages/Movies/Movies.jsx","services/movieApiService.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Searchbar, ListMovies, Loader } from 'components';\nimport { MovieApiService } from 'services/movieApiService';\n\nconst movieApiService = new MovieApiService();\n\nconst Movies = () => {\n  const [searchMovies, setSearchMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [status, setStatus] = useState('idle');\n  const query = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    const getSearchMovie = async () => {\n      if (!query) {\n        return;\n      }\n      try {\n        setStatus('pending');\n\n        const { data } = await movieApiService.fetchSearchMovie(query);\n\n        if (data.length === 0) {\n          toast.error('Ooops, someting went wrong. Please, try again.');\n          setStatus('rejected');\n          return;\n        }\n\n        setSearchMovies(data.results);\n        setStatus('resolved');\n      } catch (error) {\n        console.log(error);\n        setStatus('rejected');\n      }\n    };\n\n    getSearchMovie();\n  }, [query]);\n\n  const handleFormSubmit = searchQuery => {\n    setSearchParams(searchQuery !== '' ? { query: searchQuery } : {});\n    setSearchMovies([]);\n  };\n\n  if (searchMovies === null) {\n    return;\n  }\n  return (\n    <main>\n      <Searchbar onSubmit={handleFormSubmit} />\n      {searchMovies !== [] && <ListMovies movies={searchMovies} />}\n      {status === 'pending' && <Loader />}\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport class MovieApiService {\n  #KEY_API = '28d4f8ff1e1282fe32fa07ec61034261';\n  #MEDIA_TYPE = 'movie';\n  #TIME_WINDOW = 'day';\n\n  async fetchTrendingMovie() {\n    const response = await axios.get(\n      `trending/${this.#MEDIA_TYPE}/${this.#TIME_WINDOW}`,\n      {\n        params: {\n          api_key: this.#KEY_API,\n        },\n      }\n    );\n\n    return response;\n  }\n\n  async fetchSearchMovie(searchQuery) {\n    this.query = searchQuery;\n    const response = await axios.get(`search/movie`, {\n      params: {\n        api_key: this.#KEY_API,\n        query: this.query,\n      },\n    });\n\n    return response;\n  }\n\n  async fetchMovieById(movieId) {\n    const ID = Number(movieId);\n    const response = await axios.get(`movie/${ID}`, {\n      params: {\n        api_key: this.#KEY_API,\n      },\n    });\n\n    return response;\n  }\n\n  async fetchCast(id) {\n    const response = await axios.get(`movie/${id}/credits`, {\n      params: {\n        api_key: this.#KEY_API,\n      },\n    });\n\n    return response;\n  }\n\n  async fetchReviews(id) {\n    const response = await axios.get(`movie/${id}/reviews`, {\n      params: {\n        api_key: this.#KEY_API,\n      },\n    });\n\n    return response;\n  }\n}\n"],"names":["movieApiService","MovieApiService","useState","searchMovies","setSearchMovies","useSearchParams","searchParams","setSearchParams","status","setStatus","query","get","useEffect","getSearchMovie","fetchSearchMovie","data","length","toast","results","console","log","onSubmit","searchQuery","movies","axios","this","params","api_key","response","movieId","ID","Number","id"],"sourceRoot":""}
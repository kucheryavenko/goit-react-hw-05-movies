{"version":3,"file":"static/js/961.6a8e2cd2.chunk.js","mappings":"oPAMMA,EAAkB,IAAIC,EAAAA,EA4C5B,UA1CqB,WAAO,IAAD,EACzB,GAA8BC,EAAAA,EAAAA,UAAS,CAAC,GAAxC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,QAArC,eAAOG,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MAwBjB,OAtBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,sGAEjBN,EAAU,WAFO,SAGMN,EAAgBa,eAAeN,GAHrC,mBAKG,KAFZO,EAHS,EAGTA,MAECC,OALQ,wBAMfC,EAAAA,GAAAA,MAAY,kDACZV,EAAU,YAPK,2BAUjBA,EAAU,WACVF,EAAWU,GAXM,kDAajBG,QAAQC,IAAR,MACAZ,EAAU,YAdO,0DAAH,qDAkBlBM,GACD,GAAE,CAACL,KAGF,6BACE,SAAC,KAAD,CAAMY,GAAIV,EAASW,MAAQX,EAASW,MAAMC,KAAO,IAAjD,qBACY,YAAXhB,IACC,SAAC,KAAD,CAAWF,QAASA,EAASM,SAAQ,UAAEA,EAASW,aAAX,QAAoB,MAE/C,YAAXf,IAAwB,SAAC,KAAD,KACzB,SAAC,EAAAiB,SAAD,CAAUC,SAAU,KAApB,UACE,SAAC,KAAD,QAIP,C,iIC/CDC,EAAAA,EAAAA,SAAAA,QAAyB,gCAAzB,0EAEavB,EAAb,wFACa,qCADb,gDAEgB,UAFhB,gDAGiB,OAHjB,qFAKE,oGACyBuB,EAAAA,EAAAA,IAAA,2BACTC,KADS,0BACWA,KADX,OAErB,CACEC,OAAQ,CACNC,SAAQ,OAACF,KAAF,SALf,cACQG,EADR,yBAUSA,GAVT,gDALF,uHAkBE,WAAuBC,GAAvB,8EACEJ,KAAKK,MAAQD,EADf,SAEyBL,EAAAA,EAAAA,IAAA,eAA0B,CAC/CE,OAAQ,CACNC,SAAQ,OAACF,KAAF,MACPK,MAAOL,KAAKK,SALlB,cAEQF,EAFR,yBASSA,GATT,gDAlBF,sHA8BE,WAAqBrB,GAArB,gFACQwB,EAAKC,OAAOzB,GADpB,SAEyBiB,EAAAA,EAAAA,IAAA,gBAAmBO,GAAM,CAC9CL,OAAQ,CACNC,SAAQ,OAACF,KAAF,SAJb,cAEQG,EAFR,yBAQSA,GART,gDA9BF,iHAyCE,WAAgBK,GAAhB,uFACyBT,EAAAA,EAAAA,IAAA,gBAAmBS,EAAnB,YAAiC,CACtDP,OAAQ,CACNC,SAAQ,OAACF,KAAF,SAHb,cACQG,EADR,yBAOSA,GAPT,gDAzCF,oHAmDE,WAAmBK,GAAnB,uFACyBT,EAAAA,EAAAA,IAAA,gBAAmBS,EAAnB,YAAiC,CACtDP,OAAQ,CACNC,SAAQ,OAACF,KAAF,SAHb,cACQG,EADR,yBAOSA,GAPT,gDAnDF,6D","sources":["pages/MovieDetails/MovieDetails.jsx","services/movieApiService.js"],"sourcesContent":["import { Suspense, useState, useEffect } from 'react';\nimport { useParams, Link, Outlet, useLocation } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { MovieApiService } from 'services/movieApiService';\nimport { MovieInfo, Loader } from 'components';\n\nconst movieApiService = new MovieApiService();\n\nconst MovieDetails = () => {\n  const [details, setDetails] = useState({});\n  const [status, setStatus] = useState('idle');\n  const { movieId } = useParams();\n  const location = useLocation();\n\n  useEffect(() => {\n    const getMovieById = async () => {\n      try {\n        setStatus('pending');\n        const { data } = await movieApiService.fetchMovieById(movieId);\n\n        if (data.length === 0) {\n          toast.error('Ooops, someting went wrong. Please, try again.');\n          setStatus('rejected');\n          return;\n        }\n        setStatus('resolve');\n        setDetails(data);\n      } catch (error) {\n        console.log(error);\n        setStatus('rejected');\n      }\n    };\n\n    getMovieById();\n  }, [movieId]);\n\n  return (\n    <main>\n      <Link to={location.state ? location.state.from : '/'}>Go back</Link>\n      {status === 'resolve' && (\n        <MovieInfo details={details} location={location.state ?? '/'} />\n      )}\n      {status === 'pending' && <Loader />}\n      <Suspense fallback={null}>\n        <Outlet />\n      </Suspense>\n    </main>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport class MovieApiService {\n  #KEY_API = '28d4f8ff1e1282fe32fa07ec61034261';\n  #MEDIA_TYPE = 'movie';\n  #TIME_WINDOW = 'day';\n\n  async fetchTrendingMovie() {\n    const response = await axios.get(\n      `trending/${this.#MEDIA_TYPE}/${this.#TIME_WINDOW}`,\n      {\n        params: {\n          api_key: this.#KEY_API,\n        },\n      }\n    );\n\n    return response;\n  }\n\n  async fetchSearchMovie(searchQuery) {\n    this.query = searchQuery;\n    const response = await axios.get(`search/movie`, {\n      params: {\n        api_key: this.#KEY_API,\n        query: this.query,\n      },\n    });\n\n    return response;\n  }\n\n  async fetchMovieById(movieId) {\n    const ID = Number(movieId);\n    const response = await axios.get(`movie/${ID}`, {\n      params: {\n        api_key: this.#KEY_API,\n      },\n    });\n\n    return response;\n  }\n\n  async fetchCast(id) {\n    const response = await axios.get(`movie/${id}/credits`, {\n      params: {\n        api_key: this.#KEY_API,\n      },\n    });\n\n    return response;\n  }\n\n  async fetchReviews(id) {\n    const response = await axios.get(`movie/${id}/reviews`, {\n      params: {\n        api_key: this.#KEY_API,\n      },\n    });\n\n    return response;\n  }\n}\n"],"names":["movieApiService","MovieApiService","useState","details","setDetails","status","setStatus","movieId","useParams","location","useLocation","useEffect","getMovieById","fetchMovieById","data","length","toast","console","log","to","state","from","Suspense","fallback","axios","this","params","api_key","response","searchQuery","query","ID","Number","id"],"sourceRoot":""}